/* Copyright 2022 Ethan Halsall. This file is part of synaudio. https://github.com/eshaz/synaudio */
var d,f;d=this,f=function(d){const f=(d,f=4294967295,a=79764919)=>{const e=new Int32Array(256);let o,t,h,s=f;for(o=0;o<256;o++){for(h=o<<24,t=8;t>0;--t)h=2147483648&h?h<<1^a:h<<1;e[o]=h}for(o=0;o<d.length;o++)s=s<<8^e[255&(s>>24^d[o])];return s},a=(d,a=f)=>{const e=d=>new Uint8Array(d.length/2).map((f,a)=>parseInt(d.substring(2*a,2*(a+1)),16)),o=d=>e(d)[0],t=new Map;[,8364,,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,,381,,,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,,382,376].forEach((d,f)=>t.set(d,f));const h=new Uint8Array(d.length);let s,n,i,r=!1,g=0,z=42,q=d.length>13&&"dynEncode"===d.substring(0,9),p=0;q&&(p=11,n=o(d.substring(9,p)),n<=1&&(p+=2,z=o(d.substring(11,p))),1===n&&(p+=8,i=(d=>new DataView(e(d).buffer).getInt32(0,!0))(d.substring(13,p))));const y=256-z;for(let f=p;f<d.length;f++)if(s=d.charCodeAt(f),61!==s||r){if(92===s&&f<d.length-5&&q){const a=d.charCodeAt(f+1);117!==a&&85!==a||(s=parseInt(d.substring(f+2,f+6),16),f+=5)}if(s>255){const d=t.get(s);d&&(s=d+127)}r&&(r=!1,s-=64),h[g++]=s<z&&s>0?s+y:s-z}else r=!0;const l=h.subarray(0,g);if(q&&1===n){const d=a(l);if(d!==i){const f="Decode failed crc32 validation";throw console.error("`simple-yenc`\n",f+"\n","Expected: "+i+"; Got: "+d+"\n","Visit https://github.com/eshaz/simple-yenc for more information"),Error(f)}}return l},e=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),o=new WeakMap,t=new WeakMap,h=String.raw`dynEncode0164283d7f25dÅ×ÑedddereÄnããããããããããdfsegÉÒÚjÑÉÑÓÖÝfdfgfedjleãd¥äìhokfmÇÓÖÖÉÐÅØÉddoÃÃÌÉÅÔÃÆÅ×Égdn&e#inãoâlálàkßf¤¦bcccs¨ddddddT£¨ddddddddof¤f¤f¥f¬qdf¥eÏree¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz¥fØy¥fØ¥¤ÕÏdÎue¥fØvr|d¥¤Ïsqg¤soqndf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdsuvÐfÎ­ufsÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz¥fØoÎndfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooqvÎqvwÎw¦eà|¶qdopeoe©qddde¥fØqÎ­hãdef¥fØ¥hÏÐdÎ­i¥doe¥h­Ös¦eá¦eç~d¥Îod¥Înd¥tÎp¦çxr}g¤ây¦dzf¤s©h¤ddadfddy¥fØfÎadfdaHeaofdf¤x¦hµqdppadfdfpÎadfdaHeaofdx¦lµqdnnadfdfnÎadfdaHeaofdx¦pµqdooadfdfoÎadfdaHeaofdoxzµqeo~´hâziz¥fØdÎfffdyzà¥fØdÎfdöfdz¦eèoyzµqdyázwy¥fØvÎudfg¤fvÎrrfdfuÎtfdöfdrrfhtfhöfhf¥lÎfz¦fáz¦d¶qdooqwÎw¦eà}¶qdoof¤i¥f¬qdi¥eÏfhh¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz¥fØy¥fØ¥¤ÕÏgÎsh¥fØif|¥dwg¥¤Ïhq¦dg¤hoqngf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdhsiÐfÎ­sfhÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz¥fØoÎngfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooiqÎqiwÎw¦eà|¶qdopeoh©qdggh¥fØpÎ­hãghi¥fØ¥hÏÐgÎ­i¥doh¥h­Ör¦eá¦eç~g¥Îhg¥Îig¥tÎo¦çxf}¥dw¦dg¤ây¦dzf¤r©h¤ggadfdgy¥fØfÎadfdaHeaofdf¤x¦hµqdooadfdfoÎadfdaHeaofdx¦lµqdiiadfdfiÎadfdaHeaofdx¦pµqdhhadfdfhÎadfdaHeaofdoxzµqeo~´hâziz¥fØgÎfffdyzà¥fØgÎfdöfdz¦eèoyzµqdyázwy¥fØqÎsgfg¤fqÎnnfdfsÎvfdöfdnnfhvfhöfhf¥lÎfz¦fáz¦d¶qdoopwÎw¦eà}¶qdoo¥drm¥dfdl¥dfdjxfâj©h¤¦Ô¦dpeo¦df¤j¥e«h¤dfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz¥fØdÎfg¤ffdf¥hÎfz¦eáz¦d¶qdoo¦df¤j¥e«h¤apddddddddddddddddgfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz¥fØgÎfg¤ffdf¥hÎfz¦eáz¦d¶qdoox¦táj¦dj¥u­qd~aw¦dzgfg¤fadddaIeaJeaHefaddtaIeaJeaHefaddaIeaJeaHefaddaIeaJeaHef¥¤Ïfz¦tàz·qdo¥erx¦uá¦Ôç¦tàoyadaeöaföagöf¤xy»qdxxyá¦h¾hâapddddddddddddddddady¥fØgÎfaw¦àçzg¤fadfdaIeaJeaHef¥tÎfz¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadµqeyàiyoyázy¥fØgÎfg¤ffd÷øöf¥hÎfz¦eáz¦d¶qdoojj§ddä#ö¦dzrh¤awgfg¤ffadddaIeaoddffaddtaIeaodtffaddaIeaodffaddaIeaodf¥¤Ïfz¦tàz·qdooùf¤xz»qdxxzá¦gºhâz¥fØgÎfaw¦àçyg¤ffadfdaIeaofdf¥tÎfy¦háy¦d¶qdoµqezàizozáyz¥fØgÎfg¤fffd÷fdf¥hÎfy¦eáy¦d¶qdooejÏhõej«h¤h|k¥fØo§ddä£ùx¦uá¦Ôç¦tàlfdk{dn¦dg¤fâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dz¥dfapddddddddddddddddapddddddddddddddddg¤fnÎeadddaIefgÎiadddaJeaHeeaddtaIeiaddtaJeaHeeaddaIeiaddaJeaHeeaddaIeiaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfz¦tàz·qdooye¥fØdÎifdadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady¥fØfaw~¦àç}zg¤fnÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy¥fØfg¤fnÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØiÎfdøøÄ©hámefdlfdionoÎn{à|¸qdoof¤k¥e±qdmfdekkÐiÎfhfh­keiÏhf¤j©h¤peo¦dyj¥e«h¤h¥fØdÎfapddddddddddddddddxçyzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxyµqeoe¥fØy¥fØÎi¥fØÏdÎfxyázg¤ffdf¥hÎfz¦eáz¦d¶qdoohk³qdk|he¥fØi¥fØÏdÎo§ddä£ùx¦uá¦Ôç¦tàlfdg¤fâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dzofgpapddddddddddddddddapddddddddddddddddg¤fadddaIepadddaJeaHefaddtaIepaddtaJeaHefaddaIepaddaJeaHefaddaIepaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfp¥¤Ïpz¦tàz·qdooye¥fØdÎhfdadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady¥fØfaw~¦àç}zg¤foÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy¥fØfg¤foÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØhÎfdøøÄ©hámefdlfdioo¥hÎo¦eà|¶qdoooo`,s=String.raw`dynEncode0112b0cda4ccs/rrr!wwS-uw~swqqzwsqtswå$­R2SZ2S}32TkR2T32¹S32¿32S"|43R232323T3R22<22|4<¤J22<2<¤J22<2<¤J22<2<¤J24S"|324S"|32S"|32T42e22gRR22<2<¤J2S|32S|322T4g22|322|322 T4 d2Ti2¹S32<3!2¿323R22!2<¤4!JR2Tc22<2<¤J2Tc22<2<¤J2Tc22<2<¤J22|32T4Td R24TeT2T32T3R22|4<2¥422|4<¦2¤2<2¥4 2<¦¤2<2¥4!2<¦¤2<2¥4"2<¦¤322¦2¤2 2 ¦¤2!2!¦¤2"2"¦¤32S"|32T42e2TT42k22Tb222¹S4|<2¥422|<¦2¤322¦2¤32T32T2c22322¹S4|322|3R2<2¥42¦2<2¥4 2 ¦2¤¤322<¦2 2<¦2¤¤32S|32S|32T4Td22ÆUÑ¤4§Í22§Í±2Í´µÈµRT!3!VQ3+V3,R22¿2"22¿2"S32SH2SH2¿3 2WRT3T2 T32SaR232 2!43R2&2<Í²2<Í²2<Í²2<Í²3&2S"|32T4Td2b4WR2¹S2|323R2&2<Í²3&2S|32T4TdR2S[RT3232 2!43R2'2<Í²2<Í²2<Í²2<Í²3'2S"|32T4Td2WR2¹S2|3R2'2<Í²3'2S|32T4Td2 T32Å3%T2S[,2'È2%§3"T323R2<2"¥4$2$¦2#¤2<2"¥4#2#¦¤2<2"¥4#2#¦¤2<2"¥4#2#¦¤3#2S"|32T42eS32 TTT32'2Ê4'µÈ3"R22 k2 2T4b22¹S2|323R2<2"¥4$2$¦2#¤3#2S|32T4Td22322 Th2 2322¹4}S2|S2|3R2<2"¥4$2$¦2<2"¥4$2$¦2<2"¥4$2$¦2<2"¥4$2$¦2#¤¤¤¤3#2S"|32T4Td2%UÑ¤3%T32R23R22<2"¥J22<2"¥J22<2"¥J22<2"¥J2S"|32T42e2#2%§3#R22 k232 2T4bWR2232¹S2|3R22<2"¥J2S|32T4Td22 Th2 232¹S2|3R22<2"¥J22<2"¥J22<2"¥J22<2"¥J2S"|32T4Td22}3-2#£3"S322YR2-¿32S32S3.2+2'µ3(2¿3T3S323R2&2<Í³3)22|<Í3*2<3#222&2(´È2"2 "4%2#qW22H22%J2232)2*²3&22.|322|32242fR2S_222~4|42-22-[-322}3R2WR2,3&2 T3R2S[R2,3&T32S2|32,3&2 2!43R2&2<Í²2<Í²2<Í²2<Í²3&2S"|32T4Td2b2S2¹S|2S}2|3R2&2<Í²3&2S|32T4Td22a2S2S}2|32S32¿2¿32+2'µ3'R2&2<Í³3(22|<Í3)2<3#222&2'´È2"2 "4%2#qWR22H22%J2(2)²3&2S|32S|32T4Td`,n=String.raw`dynEncode01643fb3d24fdÅ×ÑedddereÄnããããããããããdfvegÉÒÚjÑÉÑÓÖÝfgfäähgfedjleãd¥äìhokfmÇÓÖÖÉÐÅØÉddoÃÃÌÉÅÔÃÆÅ×Égdn&e#inãoâlálàkßf¤¦bcccs¨ddddddT£¨ddddddddof¤f¤f¥f¬qdf¥eÏree¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz¥fØy¥fØ¥¤ÕÏdÎue¥fØvr|d¥¤Ïsqg¤soqndf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdsuvÐfÎ­ufsÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz¥fØoÎndfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooqvÎqvwÎw¦eà|¶qdopeoe©qddde¥fØqÎ­hãdef¥fØ¥hÏÐdÎ­i¥doe¥h­Ös¦eá¦eç~d¥Îod¥Înd¥tÎp¦çxr}g¤ây¦dzf¤s©h¤ddadfddy¥fØfÎadfdaHeaofdf¤x¦hµqdppadfdfpÎadfdaHeaofdx¦lµqdnnadfdfnÎadfdaHeaofdx¦pµqdooadfdfoÎadfdaHeaofdoxzµqeo~´hâziz¥fØdÎfffdyzà¥fØdÎfdöfdz¦eèoyzµqdyázwy¥fØvÎudfg¤fvÎrrfdfuÎtfdöfdrrfhtfhöfhf¥lÎfz¦fáz¦d¶qdooqwÎw¦eà}¶qdoof¤i¥f¬qdi¥eÏfhh¥u³h¤¦tá¦uáy¦Ôçx¦uàzzºzxá¦tá~z¦gç}áxz¥fØy¥fØ¥¤ÕÏgÎsh¥fØif|¥dwg¥¤Ïhq¦dg¤hoqngf¦dzg¤ffwÎpadddfadddaHeaoddfpaddtfaddtaHeaodtfpaddfaddaHeaodfpaddfaddaHeaodop¥¤Ïonr¥¤Ïnf¥¤Ïfz¦tàz·qdof¤z¾qdf¤~¦k¼qdhsiÐfÎ­sfhÎ¯Õqdxyg¤ppadfdradfdaHeaofdp¥tÎpr¥tÎry¦háy¦d¶qdo}´qexzàzowz¥fØoÎngfg¤foÎppfdfnÎfdöfdf¥hÎfz¦eàz¸qdooiqÎqiwÎw¦eà|¶qdopeoh©qdggh¥fØpÎ­hãghi¥fØ¥hÏÐgÎ­i¥doh¥h­Ör¦eá¦eç~g¥Îhg¥Îig¥tÎo¦çxf}¥dw¦dg¤ây¦dzf¤r©h¤ggadfdgy¥fØfÎadfdaHeaofdf¤x¦hµqdooadfdfoÎadfdaHeaofdx¦lµqdiiadfdfiÎadfdaHeaofdx¦pµqdhhadfdfhÎadfdaHeaofdoxzµqeo~´hâziz¥fØgÎfffdyzà¥fØgÎfdöfdz¦eèoyzµqdyázwy¥fØqÎsgfg¤fqÎnnfdfsÎvfdöfdnnfhvfhöfhf¥lÎfz¦fáz¦d¶qdoopwÎw¦eà}¶qdoo¥drm¥dfdl¥dfdjxfâj©h¤¦Ô¦dpeo¦df¤j¥e«h¤dfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz¥fØdÎfg¤ffdf¥hÎfz¦eáz¦d¶qdoo¦df¤j¥e«h¤apddddddddddddddddgfxçzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxµqeoxáz¥fØgÎfg¤ffdf¥hÎfz¦eáz¦d¶qdoox¦táj¦dj¥u­qd~aw¦dzgfg¤fadddaIeaJeaHefaddtaIeaJeaHefaddaIeaJeaHefaddaIeaJeaHef¥¤Ïfz¦tàz·qdo¥erx¦uá¦Ôç¦tàoyadaeöaföagöf¤xy»qdxxyá¦h¾hâapddddddddddddddddady¥fØgÎfaw¦àçzg¤fadfdaIeaJeaHef¥tÎfz¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadµqeyàiyoyázy¥fØgÎfg¤ffd÷øöf¥hÎfz¦eáz¦d¶qdoojj§ddä#ö¦dzrh¤awgfg¤ffadddaIeaoddffaddtaIeaodtffaddaIeaodffaddaIeaodf¥¤Ïfz¦tàz·qdooùf¤xz»qdxxzá¦gºhâz¥fØgÎfaw¦àçyg¤ffadfdaIeaofdf¥tÎfy¦háy¦d¶qdoµqezàizozáyz¥fØgÎfg¤fffd÷fdf¥hÎfy¦eáy¦d¶qdooejÏhõej«h¤h|k¥fØo§ddä£ùx¦uá¦Ôç¦tàlfdk{dn¦dg¤fâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dz¥dfapddddddddddddddddapddddddddddddddddg¤fnÎeadddaIefgÎiadddaJeaHeeaddtaIeiaddtaJeaHeeaddaIeiaddaJeaHeeaddaIeiaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfz¦tàz·qdooye¥fØdÎifdadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady¥fØfaw~¦àç}zg¤fnÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy¥fØfg¤fnÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØiÎfdøøÄ©hámefdlfdionoÎn{à|¸qdoof¤k¥e±qdmfdekkÐiÎfhfh­keiÏhf¤j©h¤peo¦dyj¥e«h¤h¥fØdÎfapddddddddddddddddxçyzg¤faÁfdaÃaTef¥lÎfz¦fáz¦d¶qdoaqlmnopqrsdefghijkaTeadxyµqeoe¥fØy¥fØÎi¥fØÏdÎfxyázg¤ffdf¥hÎfz¦eáz¦d¶qdoohk³qdk|he¥fØi¥fØÏdÎo§ddä£ùx¦uá¦Ôç¦tàlfdg¤fâr©h¤apddddddddddddddddapdddddddddddddddd¦dpeoaw¦dzofgpapddddddddddddddddapddddddddddddddddg¤fadddaIepadddaJeaHefaddtaIepaddtaJeaHefaddaIepaddaJeaHefaddaIepaddaJeaHeaJeaHeaJeaHeaJeaHeaJeaHef¥¤Ïfp¥¤Ïpz¦tàz·qdooye¥fØdÎhfdadaeöaföagöadaeöaföagöf¤xy»qdxxyá~¦h¾hâapddddddddddddddddadapddddddddddddddddady¥fØfaw~¦àç}zg¤foÎadfdaIefgÎadfdaJeaHef¥tÎfaJeaHez¦ház¦d¶qdoaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHeadaqlmnopqrsdefgdefgaHeaqhijkdefgdefgdefgaHead}~µqey}àiyoyázy¥fØfg¤foÎfd÷fgÎfdøöf¥hÎføöz¦eáz¦d¶qdooj¥fØhÎfdøøÄ©hámefdlfdioo¥hÎo¦eà|¶qdoooo`;class i{constructor(f={}){this.o=f.correlationSampleSize>0?f.correlationSampleSize:11025,this.t=f.initialGranularity>0?f.initialGranularity:16,this.h=f.i>=0?f.i:.5,this.q=!0===f.p,this.l=o.get(i),this.H=t.get(i),this.l||(this.q?(this.l=WebAssembly.compile(a(n)),this.H=Promise.resolve(66560)):(this.l=e().then(d=>d?WebAssembly.compile(a(h)):WebAssembly.compile(a(s))),this.H=e().then(d=>66560)),o.set(this.l),t.set(this.H)),this.T=function f(a,e,o,t,h){this.u=new Map,this.J=(d,f)=>Math.min(d.samplesDecoded,f.samplesDecoded,this.o),this.S=(d,f)=>Math.min(d.samplesDecoded,f.samplesDecoded,this.t),this.m=(d,f,a)=>{const e=new Float32Array(f.buffer);let o=a/this.k;for(let t=0;t<d.length;t++)a+=d[t].length*this.k,e.set(d[t],o),o+=d[t].length;return a},this.j=(d,f,a)=>{const e=4+(a+d.samplesDecoded*d.channelData.length*this.k+f.reduce((d,f)=>f.samplesDecoded*f.channelData.length*this.k+d,0)+f.length*this.k+f.length*this.R)/this.I;return new WebAssembly.Memory({initial:e,v:e,p:this.q})},this.M=(d,f,a)=>[a,this.m(d.channelData,f,a)],this.$=(d,f,a)=>{const e=this.m(d.channelData,f,a),o=e+this.k;return[a,e,o,o+this.k]},this.W=(a,e)=>{let o=this.u.get(a);if(!o){let d,e="text/javascript",t=`'use strict';(${""+((d,f,a,e,o)=>{self.onmessage=t=>{new d(Promise.resolve(t.data.module),Promise.resolve(t.data.P),a,e,o).A.get(f).apply(null,t.data._).then(d=>{self.postMessage(d)})}})})(${""+f}, "${a}", ${this.q}, ${this.o}, ${this.t})`;try{d=void 0!==process.versions.node}catch{}o=d?`data:${e};base64,${Buffer.from(t).toString("base64")}`:URL.createObjectURL(new Blob([t],{type:e})),this.u.set(a,o)}const t=new(globalThis.Worker||d)(o,{name:"SynAudio"}),h=new Promise(d=>{t.onmessage=f=>{t.terminate(),d(f.data)}});return Promise.all([this.l,this.H]).then(([d,f])=>{t.postMessage({module:d,P:f,_:e})}),h},this.O=(d,f,a,e,o,t,h,s,n,i,r)=>this.l.then(f=>WebAssembly.instantiate(f,{env:{memory:d}})).then(({exports:g})=>{const z=new Map(Object.entries(g)).get("correlate"),q=new DataView(d.buffer);return z(f,a,e,o,t,h,s,n,i,r),{correlation:q.getFloat32(i,!0),sampleOffset:q.getUint32(r,!0)}}),this.U=(d,f)=>this.H.then(a=>{const e=this.j(d,[f],a);let o,t,h,s,n;[o,n]=this.M(d,e,a),[t,h,s,n]=this.$(f,e,n);const i=this.J(d,f),r=this.S(d,f);return this.O(e,o,d.samplesDecoded,d.channelData.length,t,f.samplesDecoded,f.channelData.length,i,r,h,s)}),this.C=(d,f,a=1,e=()=>{})=>this.H.then(o=>{const t=this.j(d,f,o);let h,s,n,i,r;[h,r]=this.M(d,t,o);const g=f.map(f=>{[s,n,i,r]=this.$(f,t,r);const a=this.J(d,f),e=this.S(d,f);let o=f.D||0,g=f.V||d.samplesDecoded;g-o<f.samplesDecoded&&(o=0,g=d.samplesDecoded);const z=Math.min(d.samplesDecoded,Math.max(0,o)),q=Math.min(d.samplesDecoded-z,Math.max(0,z+g));return[[t,h+z*d.channelData.length*this.k,q,d.channelData.length,s,f.samplesDecoded,f.channelData.length,a,e,n,i],z]});d=null,f=null;let z=0,q=0,p=0;const y=Array(g.length);return new Promise((d,f)=>{e(0);const o=()=>{if(z>=g.length)return void(0===q&&d(y));const t=z++;q++,this.W("_runCorrelate",g[t][0]).then(d=>{d.sampleOffset+=g[t][1],y[t]=d}).catch(f).finally(()=>{q--,p++,e(p/y.length),o()}),q<a&&o()};o()})}),this.B=(d,f,a)=>{const e=[],o=[0],t=this.J(d,f),h=Math.log(d.samplesDecoded*t)/Math.log(this.t+1)*Math.log(t/1e4+1);a=Math.max(Math.round(Math.min(a,h,d.samplesDecoded/t/4)),1);const s=Math.ceil(d.samplesDecoded/a);let n=0;for(let i=0;i<a;i++){const a={channelData:[]};for(let f=0;f<d.channelData.length;f++){const e=d.channelData[f].subarray(n,n+s+t);a.channelData.push(e),a.samplesDecoded=e.length}n+=s-t,o.push(n),e.push(this.F(a,f))}return Promise.all(e).then(d=>{let f=0,a=-1;for(let e=0;e<d.length;e++)d[e].correlation>a&&(f=e,a=d[e].correlation);return{correlation:d[f].correlation,sampleOffset:d[f].sampleOffset+o[f]}})},this.F=(d,f)=>this.W("_sync",[d,f]),this.G=(d,f,a)=>globalThis.Worker?this.W("_syncWorkerConcurrent",[d,f,a]):this.B(d,f,a),this.A=new Map([["_sync",this.U],["_runCorrelate",this.O],["_syncOneToMany",this.C],["_syncWorker",this.F],["_syncWorkerConcurrent",this.B]]),this.l=a,this.H=e,this.q=o,this.o=t,this.t=h,this.I=65536,this.k=Float32Array.BYTES_PER_ELEMENT,this.R=Uint32Array.BYTES_PER_ELEMENT},this.L=new this.T(this.l,this.H,this.q,this.o,this.t)}async syncWorkerConcurrent(d,f,a){return this.L.G(d,f,a>=1?a:1)}async syncWorker(d,f){return this.L.F(d,f)}async sync(d,f){return this.L.U(d,f)}async Y(d,f,a,e){const o=this.L.C(d,f,a,e);return d=null,f=null,o}async syncMultiple(d,f){f=f>=1?f:8;const a=[],e=[];let o=()=>{},t=Promise.resolve(),h=0;const s=()=>{t=new Promise(d=>{o=d})};for(let y=0;y<d.length;y++)e.push({vertex:{}});for(let y=0;y<d.length;y++){const n=d[y],i=e[y].vertex;i.name=n.name,i.samplesDecoded=n.data.samplesDecoded,i.Z=new Set;for(let r=0;r<d.length;r++){if(y===r)continue;const g=d[r],z=e[r];h++,a.push(this.syncWorker(n.data,g.data).then(d=>{d.correlation>this.h&&i.Z.add({parent:i,vertex:z.vertex,samplesDecoded:g.data.samplesDecoded,...d}),h--,o()})),h>=f&&(s(),await t)}}await Promise.all(a);const n=(d,f)=>d.parent&&f.parent&&d.parent.samplesDecoded!==f.parent.samplesDecoded?d.parent.samplesDecoded>f.parent.samplesDecoded:d.correlation!==f.correlation?d.correlation>f.correlation:d.sampleOffset!==f.sampleOffset?d.sampleOffset>f.sampleOffset:d.vertex&&f.vertex&&d.vertex.name.localeCompare(f.vertex.name)<0,i=new Map,r=new Set,g=d=>{for(const f of d.Z.values()){if(i.has(d))return i.get(d);i.set(d,f);const a=g(f.vertex),e=f;if(a){let d,f;n(a,e)?(d=a,f=e):(d=e,f=a),f.K||(f.K=new Set,r.add(f)),f.K.add(d),d.K&&d.K.delete(f)}i.delete(d)}};for(const{vertex:y}of e)g(y);for(const y of r)y.K.size&&y.parent.Z.delete(y);const z=new Set;for(const y of e)z.add(y.vertex);for(const y of e)for(const d of y.vertex.Z)z.delete(d.vertex);const q=(d,f,a,e=0)=>{for(const o of a)d.has(o.vertex)&&n(d.get(o.vertex),o)||d.set(o.vertex,{name:o.vertex.name,correlation:o.correlation,sampleOffset:e+o.sampleOffset}),q(d,f,o.vertex.Z,e+o.sampleOffset)},p=[];for(const y of z){const d=new Map;d.set(y,{name:y.name,sampleOffset:0}),q(d,y,y.Z),p.push([...d.values()].sort((d,f)=>d.sampleOffset-f.sampleOffset||(d.correlation||0)-(f.correlation||0)||f.name.localeCompare(d.name)))}return p}}return i},"object"==typeof exports&&"undefined"!=typeof module?module.exports=f(require("@eshaz/web-worker")):"function"==typeof define&&define.amd?define(["@eshaz/web-worker"],f):(d="undefined"!=typeof globalThis?globalThis:d||self).SynAudio=f(d.Worker);
//# sourceMappingURL=synaudio.min.js.map